{"code":"#include <bits\/stdc++.h>\r\n#define int long long\r\nusing namespace std;\r\n\r\nint _mergeSort(int arr[], int temp[], int left, int right);\r\nint merge(int arr[], int temp[], int left, int mid, int right);\r\n\r\nint mergeSort(int arr[], int array_size)\r\n{\r\n    int temp[array_size];\r\n    return _mergeSort(arr, temp, 0, array_size - 1);\r\n}\r\n\r\nint _mergeSort(int arr[], int temp[], int left, int right)\r\n{\r\n    int mid, inv_count = 0;\r\n    if (right > left) {\r\n        mid = (right + left) \/ 2;\r\n        inv_count = _mergeSort(arr, temp, left, mid);\r\n        inv_count += _mergeSort(arr, temp, mid + 1, right);\r\n        inv_count += merge(arr, temp, left, mid + 1, right);\r\n    }\r\n    return inv_count;\r\n}\r\n\r\nint merge(int arr[], int temp[], int left, int mid, int right)\r\n{\r\n    int i, j, k;\r\n    int inv_count = 0;\r\n    i = left;\r\n    j = mid;\r\n    k = left;\r\n\r\n    while ((i <= mid - 1) && (j <= right)) {\r\n        if (arr[i] > 2 * arr[j]) {\r\n            inv_count += (mid - i);\r\n            j++;\r\n        }\r\n        else {\r\n            i++;}\r\n    }\r\n\r\n    i = left;\r\n    j = mid;\r\n    k = left;\r\n\r\n    while ((i <= mid - 1) && (j <= right)) {\r\n        if (arr[i] <= arr[j]) {\r\n            temp[k++] = arr[i++];\r\n        }\r\n        else {\r\n            temp[k++] = arr[j++];\r\n        }\r\n    }\r\n\r\n    while (i <= mid - 1)\r\n        temp[k++] = arr[i++];\r\n\r\n    while (j <= right)\r\n        temp[k++] = arr[j++];\r\n\r\n    for (i = left; i <= right; i++)\r\n        arr[i] = temp[i];\r\n\r\n    return inv_count;\r\n}\r\nint32_t main()\r\n{\r\n    int n;\r\n    cin >> n;\r\n    int arr[n];\r\n\r\n    for (int i=0; i<n; i++){\r\n        cin >> arr[i];\r\n    }\r\n    cout << mergeSort(arr, n);\r\n\r\n    return 0;\r\n}","lang":4}