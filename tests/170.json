{"code":"#include <bits\/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\n \r\n\r\nint merge(int arr[], int temp[], int left, int mid, int right)\r\n\r\n{\r\n\r\n    int i, j, k;\r\n\r\n    int inv_count = 0;\r\n\r\n \r\n\r\n    i = left;\r\n\r\n    j = mid; \r\n\r\n    k = left; \r\n\r\n    while ((i <= mid - 1) && (j <= right))\r\n\r\n    {\r\n\r\n        if (arr[i] <= arr[j])\r\n\r\n            temp[k++] = arr[i++];\r\n\r\n        else\r\n\r\n        {\r\n\r\n            temp[k++] = arr[j++];\r\n\r\n            inv_count = inv_count + (mid - i);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    while (i <= mid - 1)\r\n\r\n        temp[k++] = arr[i++];\r\n\r\n \r\n\r\n    while (j <= right)\r\n\r\n       temp[k++] = arr[j++];\r\n\r\n \r\n\r\n    for (i = left; i <= right; i++)\r\n\r\n        arr[i] = temp[i];\r\n\r\n \r\n\r\n    return inv_count;\r\n\r\n}\r\n\r\n \r\n\r\nint _mergeSort(int arr[], int temp[], int left,\r\n\r\n                                      int right)\r\n\r\n{\r\n\r\n    int mid, inv_count = 0;\r\n\r\n    if (right > left)\r\n\r\n    {\r\n\r\n        mid = (right + left)\/2;\r\n\r\n        inv_count  = _mergeSort(arr, temp, left,\r\n\r\n                                           mid);\r\n\r\n        inv_count += _mergeSort(arr, temp, mid+1,\r\n\r\n                                          right);\r\n\r\n        inv_count += merge(arr, temp, left, mid+1,\r\n\r\n                                            right);\r\n\r\n    }\r\n\r\n    return inv_count;\r\n\r\n}\r\n\r\n \r\n\r\nint mergeSort(int arr[], int array_size)\r\n\r\n{\r\n\r\n    int *temp = (int *)malloc(sizeof(int)*array_size);\r\n\r\n    return _mergeSort(arr, temp, 0, array_size - 1);\r\n\r\n}\r\n\r\n \r\n\r\nbool possibleSortingBy3SizeSubarray(int arr[], int N)\r\n\r\n{\r\n\r\n    int numberOfInversion = mergeSort(arr, N);\r\n\r\n \r\n\r\n    return (numberOfInversion % 2 == 0);\r\n\r\n}\r\n\r\n \r\n\r\nint main()\r\n\r\n{\r\n\r\n    int n;\r\n\r\n    cin >> n;\r\n\r\n    int arr[n];\r\n\r\n    for (int i = 0; i < n; i++)\r\n\r\n       cin >> arr[i];\r\n\r\n \r\n\r\n    possibleSortingBy3SizeSubarray(arr, n)?\r\n\r\n        cout << \"YES\\n\" : cout << \"NO\\n\";\r\n\r\n}","lang":4}