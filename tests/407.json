{"code":"\/\/ C++ implementation of the approach\r\n#include <bits\/stdc++.h>\r\nusing namespace std;\r\nconst int M = 2;\r\nint arr[M];\r\nint P[1001];\r\nint Q[1001];\r\nvoid unique_combination(int l, int sum, int K, vector<int>& local, vector<int>& A)\r\n{\r\n\t\/\/ If a unique combination is found\r\n\tif (sum == K) {\r\n\t\tarr[0] = 1;\r\n        for (int i = 0; i < local.size(); i++)\r\n        {\r\n            Q[local[i]]++;\r\n        }\r\n\t\treturn;\r\n\t}\r\n\r\n\t\/\/ For all other combinations\r\n\tfor (int i = l; i < A.size(); i++)\r\n\t{\r\n\r\n\t\t\/\/ Check if the sum exceeds K\r\n\t\tif (sum + A[i] > K)\r\n\t\t\tcontinue;\r\n\r\n\t\t\/\/ Check if it is repeated or not\r\n\t\tif (i > l and A[i] == A[i - 1])\r\n\t\t\tcontinue;\r\n\r\n\t\t\/\/ Take the element into the combination\r\n\t\tlocal.push_back(A[i]);\r\n\r\n\t\tif (arr[0] == 0)\r\n\t\tunique_combination(i + 1, sum + A[i], K, local, A);\r\n\r\n\t\t\/\/ Remove element from the combination\r\n\t\tlocal.pop_back();\r\n\t}\r\n}\r\n\r\n\/\/ Function to find all combination\r\n\/\/ of the given elements\r\nvoid Combination(vector<int> A, int K)\r\n{\r\n\t\/\/ Sort the given elements\r\n\tsort(A.begin(), A.end());\r\n\r\n\t\/\/ To store combination\r\n\tvector<int> local;\r\n\r\n\tunique_combination(0, 0, K, local, A);\r\n}\r\n\r\n\/\/ Driver code\r\nint main()\r\n{\r\n\tint n, x, K;\r\n    scanf(\"%d%d\", &n, &K);\r\n    vector<int>A;\r\n    for (int i = 0; i < n; i++) {\r\n        scanf(\"%d\", &x);\r\n        P[i] = x;\r\n        A.push_back(x);\r\n    }\r\n\tCombination(A, K);\r\n\tif (arr[0] == 0) return cout << \"no\", 0;\r\n\tfor (int i = 0; i < n; i++) {\r\n        if (Q[P[i]]) {\r\n            Q[P[i]]--;\r\n            cout << i << \" \";\r\n        }\r\n\t}\r\n\r\n\treturn 0;\r\n}","lang":4}