{"code":"#include <bits\/stdc++.h>\r\nusing namespace std;\r\ntypedef long long LL;\r\nconst int mxxxx = 100000;\r\nint arrrrrrrrrrrrrrrrrrrrr[mxxxx];\r\nconst int maxn = 101, mod = 1000000007;\r\nstruct Fibonacci\r\n{\r\n  int num1, num2;\r\n  bool operator == (const Fibonacci &x) const\r\n  {\r\n    return num1 == x.num1 && num2 == x.num2;\r\n  }\r\n  Fibonacci operator * (const Fibonacci &x) const\r\n  {\r\n    return (Fibonacci){((LL)num1 * x.num1 + (LL)num2 * x.num2) % mod,\r\n    ((LL)num1 * x.num2 + (LL)num2 * (x.num1 + x.num2)) % mod};\r\n  }\r\n  Fibonacci pow(LL k)\r\n  {\r\n    Fibonacci ret = (Fibonacci){1, 0}, tmp = *this;\r\n    while(k)\r\n    {\r\n      if(k & 1)\r\n        ret = ret * tmp;\r\n      tmp = tmp * tmp;\r\n      k >>= 1;\r\n    }\r\n    return ret;\r\n  }\r\n} A = {0, 1}, I = {1, 0};\r\nint Fib(int x)\r\n{\r\n  return A.pow(x).num2;\r\n}\r\nint n, a[maxn];\r\nint inv(int x)\r\n{\r\n  return x <= 1 ? x : mod - (LL)mod \/ x * inv(mod % x) % mod;\r\n}\r\nmap<pair<int, int>, int> Hash;\r\nint dfs(int g, int i)\r\n{\r\n  pair<int, int> idx = make_pair(g, i);\r\n  if(Hash.count(idx))\r\n    return Hash[idx];\r\n  if(!i)\r\n    return Hash[idx] = 1;\r\n  int r = __gcd(g, a[i - 1]);\r\n  if(g == r)\r\n    return Hash[idx] = Fib(r);\r\n  return Hash[idx] = (LL)Fib(r) * dfs(g, i - 1) % mod * inv(dfs(r, i - 1)) % mod;\r\n}\r\nint main()\r\n{\r\n  scanf(\"%d\", &n);\r\n  for(int i = 0; i < n; ++i)\r\n    scanf(\"%d\", a + i);\r\n  sort(a, a + n);\r\n  n = unique(a, a + n) - a;\r\n  printf(\"%d\\n\", dfs(0, n));\r\n  return 0;\r\n}","lang":4}