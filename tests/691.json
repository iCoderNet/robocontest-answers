{"code":"\/\/ C++ code for Maximum size square\r\n\/\/ sub-matrix with all 1s\r\n\/\/ (space optimized solution)\r\n#include <bits\/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nbool M[500][500];\r\n\r\nvoid printMaxSubSquare(int C, int R)\r\n{\r\n\tint S[2][C], Max = 0;\r\n\r\n\t\/\/ set all elements of S to 0 first\r\n\tmemset(S, 0, sizeof(S));\r\n\r\n\t\/\/ Construct the entries\r\n\tfor (int i = 0; i < R;i++)\r\n\t\tfor (int j = 0; j < C;j++){\r\n\r\n\t\t\t\/\/ Compute the entrie at the current position\r\n\t\t\tint Entrie = M[i][j];\r\n\t\t\tif(Entrie)\r\n\t\t\t\tif(j)\r\n\t\t\t\t\tEntrie = 1 + min(S[1][j - 1], min(S[0][j - 1], S[1][j]));\r\n\r\n\t\t\t\/\/ Save the last entrie and add the new one\r\n\t\t\tS[0][j] = S[1][j];\r\n\t\t\tS[1][j] = Entrie;\r\n\r\n\t\t\t\/\/ Keep track of the max square length\r\n\t\t\tMax = max(Max, Entrie);\r\n\t\t}\r\n\r\n\tcout << Max * Max;\r\n}\r\n\r\n\/\/ Driver code\r\nint main ()\r\n{\r\n    int n;\r\n    cin >> n;\r\n\tfor (int i = 0; i < n; i++)\r\n    {\r\n        string s;\r\n        cin >> s;\r\n        for (int j = 0; j < s.size(); j++)\r\n        {\r\n            M[i][j] = s[j] - 48;\r\n        }\r\n    }\r\n\r\n\tprintMaxSubSquare(n, n);\r\n\r\n\treturn 0;\r\n}","lang":4}