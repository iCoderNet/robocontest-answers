{"code":"#include <bits\/stdc++.h>\r\nusing namespace std;\r\n\r\n#define int long long int\r\n#define fast ios::sync_with_stdio(0),cin.tie(0),cout.tie(0)\r\n#define all(x) (x).begin(),(x).end()\r\n#define ln cout<<'\\n'\r\n#define X first\r\n#define Y second\r\n#define vp vector<pair<int,int>>\r\ntemplate<typename T>\r\nvoid print(T a)\r\n{\r\n    for(int i=0; i<a.size(); ++i)\r\n    {\r\n        cout << a[i] << \"\\n\";\r\n    }\r\n    cout << \"\\n\";\r\n}\r\n\r\nvector<string> v, ans;\r\nvector<pair<int, int> > path;\r\nvector<vector<pair<int, int> >> paths;\r\nmap<char, vector<vector<pair<int, int> > > > paths_mp;\r\nchar chars[] = {'*', '#', '$', '@'};\r\n\r\nbool used[4][4]={};\r\n\r\nmap<char, vector<pair<int, int> > > mp;\r\nbool is_all()\r\n{\r\n    for(auto x: ans)\r\n    {\r\n        for(auto y: x) if (y=='.') return 0;\r\n    }\r\n    return 1;\r\n}\r\n\r\nvoid make_used(vector<pair<int, int>> a, char c)\r\n{\r\n    for(int i=0; i<4; ++i) for(int j=0; j<4; ++j) used[i][j]=0;\r\n    for(auto y: mp)\r\n    {\r\n        if (y.first==c) continue;\r\n        for(auto x: y.second)\r\n        {\r\n            used[x.first][x.second]=1;\r\n        }\r\n    }\r\n    for(auto x:a ) used[x.first][x.second]=1;\r\n}\r\nvoid make_used1(vector<pair<int, int>> a)\r\n{\r\n    for(int i=0; i<4; ++i) for(int j=0; j<4; ++j) used[i][j]=0;\r\n\r\n    for(auto x:a ) used[x.first][x.second]=1;\r\n}\r\n\r\nvector<pair<int, int>> get_nears(pair<int, int> a)\r\n{\r\n    vector<pair<int, int>> v;\r\n    if (a.first>0 && !used[a.first-1][a.second] ) v.push_back({a.first-1, a.second});\r\n    if (a.second>0 && !used[a.first][a.second-1] ) v.push_back({a.first, a.second-1});\r\n    if (a.first<3 && !used[a.first+1][a.second] ) v.push_back({a.first+1, a.second});\r\n    if (a.second<3 && !used[a.first][a.second+1] ) v.push_back({a.first, a.second+1});\r\n    return v;\r\n}\r\n\r\n\r\nvoid dfs(pair<int, int> a, char t)\r\n{\r\n\r\n    if (a==mp[t][1])\r\n    {\r\n        path.push_back(a);\r\n        paths.push_back(path);\r\n        path.pop_back();\r\n        return;\r\n    }\r\n\r\n\r\n    for(auto x: get_nears(a))\r\n    {\r\n        path.push_back(a);\r\n        used[a.first][a.second]=1;\r\n        dfs(x, t);\r\n        used[x.first][x.second]=0;\r\n        path.pop_back();\r\n    }\r\n}\r\n\r\nbool can_get_all(char c)\r\n{\r\n    map<char, bool> qw;\r\n    qw[c]=1;\r\n    for(char cc: chars)\r\n    {\r\n        if (c==cc) continue;\r\n        for(auto p: paths_mp[cc])\r\n        {\r\n            bool ff=1;\r\n            for(auto q: p)\r\n            {\r\n                if (used[q.first][q.second])\r\n                {\r\n                    ff=0;\r\n                    break;\r\n                }\r\n            }\r\n            if (ff)\r\n            {\r\n                qw[cc]=1;\r\n                break;\r\n            }\r\n\r\n        }\r\n        if (qw[cc]==0) return 0;\r\n    }\r\n\r\n    return 1;\r\n}\r\n\r\nvoid print_paths(vector<pair<int, int> >  a)\r\n{\r\n\r\n        for(auto y: a) cout << \"{\" << y.first << \", \"<<y.second<<\"}, \";\r\n        ln;\r\n\r\n}\r\n\r\n\r\nbool can(vp a1, vp a2, vp a3, vp a4)\r\n{\r\n    vector<vector<bool>> uused(4, vector<bool>(4, 0));\r\n    for(auto x: a1)\r\n    {\r\n        if (uused[x.first][x.second]) return 0;\r\n        uused[x.first][x.second] =1;\r\n    }\r\n    for(auto x: a2)\r\n    {\r\n        if (uused[x.first][x.second]) return 0;\r\n        uused[x.first][x.second] =1;\r\n    }\r\n    for(auto x: a3)\r\n    {\r\n        if (uused[x.first][x.second]) return 0;\r\n        uused[x.first][x.second] =1;\r\n    }\r\n    for(auto x: a4)\r\n    {\r\n        if (uused[x.first][x.second]) return 0;\r\n        uused[x.first][x.second] =1;\r\n    }\r\n    for(auto x: uused)\r\n    {\r\n        for(auto y: x)\r\n        {\r\n            if (!y) return 0;\r\n        }\r\n    }\r\n    return 1;\r\n}\r\n\r\nvoid solve()\r\n{\r\n\r\n    for(int i=0; i<4; ++i)\r\n    {\r\n        string s;\r\n        cin >> s;\r\n        ans.push_back(s);\r\n        for(int j=0; j<4; ++j)\r\n        {\r\n            if (s[j]!='.') mp[s[j]].push_back({i, j});\r\n        }\r\n    }\r\n\r\n    v=ans;\r\n    set<char> ss;\r\n    for(auto x: mp) ss.insert(x.first);\r\n    vector<pair<int, int> > empt;\r\n    for(char cc: chars)\r\n    {\r\n        if (mp[cc].size()==0) continue;\r\n        make_used(empt, cc);\r\n        dfs(mp[cc][0], cc);\r\n        paths_mp[cc] = paths;\r\n        paths.clear();\r\n        path.clear();\r\n    }\r\n\r\n\r\n    map<char, vector<pair<int, int> > >  correts_paths;\r\n\r\n\r\n    if (ss.size()==4)\r\n    for(auto a1: paths_mp['*'])\r\n    for(auto a2: paths_mp['@'])\r\n    for(auto a3: paths_mp['#'])\r\n    for(auto a4: paths_mp['$'])\r\n    {\r\n        if (can(a1, a2, a3, a4))\r\n        {\r\n            correts_paths['*']=a1;\r\n            correts_paths['@']=a2;\r\n            correts_paths['#']=a3;\r\n            correts_paths['$']=a4;\r\n            for(char cc: chars)\r\n            {\r\n                for(auto p: correts_paths[cc])\r\n                {\r\n                    ans[p.first][p.second] = cc;\r\n                }\r\n            }\r\n            print(ans);\r\n            return;\r\n        }\r\n    }\r\n    if (ss.size()==3)\r\n    {\r\n        auto it = ss.begin();\r\n        char c1 = *it;\r\n        ++it;\r\n        char c2 = *it;\r\n        ++it;\r\n        char c3 = *it;\r\n        for(auto a1: paths_mp[c1])\r\n        for(auto a2: paths_mp[c2])\r\n        for(auto a3: paths_mp[c3])\r\n        {\r\n\r\n            if (can(a1, a2, a3, empt))\r\n            {\r\n                correts_paths[c1]=a1;\r\n                correts_paths[c2]=a2;\r\n                correts_paths[c3]=a3;\r\n                for(char cc: chars)\r\n                {\r\n                    for(auto p: correts_paths[cc])\r\n                    {\r\n                        ans[p.first][p.second] = cc;\r\n                    }\r\n                }\r\n                print(ans);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    if (ss.size()==2)\r\n    {\r\n        auto it = ss.begin();\r\n        char c1 = *it;\r\n        ++it;\r\n        char c2 = *it;\r\n        for(auto a1: paths_mp[c1])\r\n        for(auto a2: paths_mp[c2])\r\n        {\r\n\r\n            if (can(a1, a2, empt, empt))\r\n            {\r\n                correts_paths[c1]=a1;\r\n                correts_paths[c2]=a2;\r\n                for(char cc: chars)\r\n                {\r\n                    for(auto p: correts_paths[cc])\r\n                    {\r\n                        ans[p.first][p.second] = cc;\r\n                    }\r\n                }\r\n                print(ans);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    if (ss.size()==1)\r\n    {\r\n        auto it = ss.begin();\r\n        char c1 = *it;\r\n        for(auto a1: paths_mp[c1])\r\n        {\r\n\r\n            if (can(a1, empt, empt, empt))\r\n            {\r\n                correts_paths[c1]=a1;\r\n                for(char cc: chars)\r\n                {\r\n                    for(auto p: correts_paths[cc])\r\n                    {\r\n                        ans[p.first][p.second] = cc;\r\n                    }\r\n                }\r\n                print(ans);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    assert(0);\r\n}\r\n\r\n\r\nsigned main()\r\n{\r\n    int t=1;\r\n    while(t--)\r\n    {\r\n        solve();\r\n    }\r\n    return 0;\r\n}","lang":4}