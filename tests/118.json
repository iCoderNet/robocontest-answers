{"code":"#include <iostream>\r\n#include <string>\r\n#include <ios>\r\n\r\nusing std::string;\r\n\r\nint ord(const char c){ return c>='A'?10+c-'A':c-'0'; }\r\nchar chr(const int i){\r\n  return static_cast<char>(i<10?'0'+i:'A'+(i-10));\r\n}\r\n\r\nbool process(const int (&res)[8], const int (&count)[8], int &k, string &a, string &b, const string &c, const bool must_afford){\r\n  const int n=a.size();\r\n  for(int i=0;i<n;++i){\r\n    const int aval0=ord(a[i]), bval0=ord(b[i]), cval=ord(c[i]);\r\n    int aval1=0, bval1=0;\r\n    for(int j=4-1;j!=-1;--j){\r\n      int key=0;\r\n      key|=(1&(aval0>>j))<<2;\r\n      key|=(1&(bval0>>j))<<1;\r\n      key|=1&(cval>>j);\r\n      int r=res[key];\r\n      if(k<count[key]){\r\n  if(must_afford) return false;\r\n  r=key;\r\n      }else k-=count[key];\r\n      aval1|=(1&(r>>2))<<j;\r\n      bval1|=(1&(r>>1))<<j;\r\n    }\r\n    a[i]=chr(aval1);\r\n    b[i]=chr(bval1);\r\n  }\r\n  return true;\r\n}\r\nbool solve(int k, string &a, string &b, const string &c){\r\n  const int mand_res[]={0,3,0,3,0,5,0,7};\r\n  const int mand_count[]={0,1,1,0,1,0,2,0};\r\n  const int opt_res[]={0,1,2,3,4,3,6,3};\r\n  const int opt_count[]={0,0,0,0,0,2,0,1};\r\n  if(!process(mand_res,mand_count,k,a,b,c,true)) return false;\r\n  process(opt_res,opt_count,k,a,b,c,false);\r\n  return true;\r\n}\r\n\r\nvoid pad(string &s, const int sz){\r\n  if(s.size()<sz){\r\n    s=string(sz-s.size(),'0')+s;\r\n  }\r\n}\r\n\r\nint larger(const int a, const int b){return a>b?a:b;}\r\n\r\nvoid equalize(string &a, string &b, string &c){\r\n  const int sz=larger(a.size(),larger(b.size(),c.size()));\r\n  pad(a,sz);\r\n  pad(b,sz);\r\n  pad(c,sz);\r\n}\r\nvoid print_hex(const string &a){\r\n  int i=0;\r\n  for(;i<a.size() && a[i]=='0';++i);\r\n  if(i==a.size()) std::cout << \"0\\n\";\r\n  else std::cout << a.substr(i) << '\\n';\r\n}\r\n\r\nint main(){\r\n  std::ios_base::sync_with_stdio(false);\r\n  int q=0;\r\n  std::cin >> q;\r\n  while(q--){\r\n    int k=0;\r\n    string a,b,c;\r\n    std::cin >> k >> a >> b >> c;\r\n    equalize(a,b,c);\r\n    if(solve(k,a,b,c)){\r\n      print_hex(a);\r\n      print_hex(b);\r\n    }else std::cout << \"-1\\n\";\r\n    }}","lang":4}