{"code":"\/*\r\n\u2588\u2588    \u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588   \u2588\u2588\r\n\u2588\u2588\u2588  \u2588\u2588\u2588  \u2588\u2588        \u2588\u2588     \u2588\u2588 \u2588\u2588\r\n\u2588\u2588 \u2588\u2588 \u2588\u2588  \u2588\u2588        \u2588\u2588      \u2588\u2588\r\n\u2588\u2588    \u2588\u2588  \u2588\u2588        \u2588\u2588      \u2588\u2588\r\n\r\n  \u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2588\u2588      \u2588\u2588   \u2588\u2588  \u2588\u2588  \u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588   \u2588\u2588\r\n \u2588\u2588        \u2588\u2588       \u2588\u2588\u2588\u2588     \u2588\u2588   \u2588\u2588  \u2588\u2588 \u2588\u2588   \u2588\u2588      \u2588\u2588   \u2588\u2588\r\n \u2588\u2588        \u2588\u2588      \u2588\u2588  \u2588\u2588    \u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588    \u2588\u2588\u2588\u2588    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\r\n \u2588\u2588        \u2588\u2588     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588   \u2588\u2588  \u2588\u2588 \u2588\u2588   \u2588\u2588      \u2588\u2588   \u2588\u2588\r\n  \u2588\u2588\u2588\u2588     \u2588\u2588    \u2588\u2588\u2588    \u2588\u2588\u2588  \u2588\u2588   \u2588\u2588  \u2588\u2588  \u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588   \u2588\u2588\r\n*\/\r\n#include <bits\/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nvector<string> split_string(string);\r\n\r\nvoid compress(vector<long> &arr, int _z) {\r\n    auto z = arr.begin()+ _z;\r\n    for (z; z<arr.end(); z++) {\r\n        if (*z==0 && z>arr.begin() && z<arr.end()-1) {\r\n            arr[_z-1]+=arr[_z+1];\r\n            arr.erase(z, z+2);\r\n        } else if (*z==0 && z==arr.end()-1)\r\n            arr.erase(z, z+1);\r\n    }\r\n}\r\n\/*\r\n * Complete the whatsNext function below.\r\n *\/\r\nvoid whatsNext(vector<long> &arr) {\r\n    \/*\r\n     * Write your code here.\r\n     *\/\r\n    int n = arr.size();\r\n\r\n    if (n<=2) { n+=2;\r\n        arr.insert(arr.begin(), 1);\r\n        arr.insert(arr.begin(), 0);\r\n    }\r\n    long z = (n&1)?(n-2):(n-3); \/\/lastZeroIndx\r\n    if (z>0) {\r\n        long ones = arr[z+1];\r\n        long digits = ones + ((n&1)?0: arr[z+2]);\r\n        arr[z]--;\r\n        arr.insert(arr.begin()+z+1, 1); \/\/set 1\r\n        if (n&1) arr.insert(arr.begin()+z+2, 1); \/\/set 0\r\n        \/\/cout << \"z\" << z << \" ones\" << ones << \" digits\" << digits << endl;\r\n        arr[z+3]= ones-1; \/\/update 1s\r\n        arr[z+2]= digits-arr[z+3]; \/\/update 0s\r\n    }\r\n    if (arr[0]==0 && arr[1]==0) arr.erase(arr.begin(), arr.begin()+2), z=0;\r\n    compress(arr, z);\r\n}\r\nint main()\r\n{\r\n    int t;\r\n    cin >> t;\r\n    cin.ignore(numeric_limits<streamsize>::max(), '\\n');\r\n\r\n    for (int t_itr = 0; t_itr < t; t_itr++) {\r\n        int arr_count;\r\n        cin >> arr_count;\r\n        cin.ignore(numeric_limits<streamsize>::max(), '\\n');\r\n\r\n        string arr_temp_temp;\r\n        getline(cin, arr_temp_temp);\r\n\r\n        vector<string> arr_temp = split_string(arr_temp_temp);\r\n\r\n        vector<long> arr(arr_count);\r\n\r\n        for (int arr_itr = 0; arr_itr < arr_count; arr_itr++) {\r\n            long arr_item = stol(arr_temp[arr_itr]);\r\n\r\n            arr[arr_itr] = arr_item;\r\n        }\r\n        whatsNext(arr);\r\n        cout << arr.size() << endl;\r\n        for (auto a: arr) cout << a << \" \"; cout << endl;\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\nvector<string> split_string(string input_string) {\r\n    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {\r\n        return x == y and x == ' ';\r\n    });\r\n\r\n    input_string.erase(new_end, input_string.end());\r\n\r\n    while (input_string[input_string.length() - 1] == ' ') {\r\n        input_string.pop_back();\r\n    }\r\n\r\n    vector<string> splits;\r\n    char delimiter = ' ';\r\n\r\n    size_t i = 0;\r\n    size_t pos = input_string.find(delimiter);\r\n\r\n    while (pos != string::npos) {\r\n        splits.push_back(input_string.substr(i, pos - i));\r\n\r\n        i = pos + 1;\r\n        pos = input_string.find(delimiter, i);\r\n    }\r\n\r\n    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));\r\n\r\n    return splits;\r\n}","lang":4}