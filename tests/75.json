{"code":"#include <bits\/stdc++.h>\r\n#define ll long long\r\nusing namespace std;\r\n\r\nll _mergeSort(ll arr[], ll temp[], ll left, ll right);\r\nll merge(ll arr[], ll temp[], ll left, ll mid, ll right);\r\n\r\nll mergeSort(ll arr[], ll array_size)\r\n{\r\n  ll temp[array_size];\r\n  return _mergeSort(arr, temp, 0, array_size - 1);\r\n}\r\n\r\nll _mergeSort(ll arr[], ll temp[], ll left, ll right)\r\n{\r\n  ll mid, inv_count = 0;\r\n  if (right > left) {\r\n    mid = (right + left) \/ 2;\r\n\r\n    inv_count += _mergeSort(arr, temp, left, mid);\r\n    inv_count += _mergeSort(arr, temp, mid + 1, right);\r\n\r\n    inv_count += merge(arr, temp, left, mid + 1, right);\r\n  }\r\n  return inv_count;\r\n}\r\n\r\nll merge(ll arr[], ll temp[], ll left,\r\n    ll mid, ll right)\r\n{\r\n  ll i, j, k;\r\n  ll inv_count = 0;\r\ni = left;\r\n  j = mid;\r\n  k = left;\r\n  while ((i <= mid - 1) && (j <= right)) {\r\n    if (arr[i] <= arr[j]) {\r\n      temp[k++] = arr[i++];\r\n    }\r\n    else {\r\n      temp[k++] = arr[j++];\r\n\r\n      inv_count = inv_count + (mid - i);\r\n    }\r\n  }\r\n\r\n  while (i <= mid - 1)\r\n    temp[k++] = arr[i++];\r\n\r\n  while (j <= right)\r\n    temp[k++] = arr[j++];\r\n\r\n  for (i = left; i <= right; i++)\r\n    arr[i] = temp[i];\r\n\r\n  return inv_count;\r\n}\r\nint main()\r\n{\r\n    ll n;\r\n    cin >> n;\r\n    ll arr[n];\r\n    for (ll i=0; i<n; i++){\r\n        cin >> arr[i];\r\n    }\r\n  cout << mergeSort(arr, n);\r\n  return 0;\r\n}","lang":4}