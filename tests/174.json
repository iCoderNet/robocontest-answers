{"code":"#include <iostream>\r\n#include <vector>\r\n#include <set>\r\n#include <map>\r\nusing namespace std;\r\nvoid dfs(multiset<int>&mt,set<int>&ms,int p[],int arr[],vector<int>adj[],int x) {\r\n\tp[x] = 1;\r\n\tms.insert(x);\r\n\tmt.insert(arr[x]);\r\n\tfor (auto y : adj[x]) {\r\n\t\tif (p[y]==0) {\r\n\t\t\tdfs(mt,ms,p,arr,adj,y);\r\n\t\t}\r\n\t}\r\n}\r\nvoid solve() {\r\n\tint n, m;\r\n\tcin >> n >> m;\r\n\tint arr[n+1], p[n+1];\r\n\tvector< int > adj[n+1];\r\n\tfor (int i = 1; i <= n; i++) {\r\n\t\tcin >> arr[i];\r\n\t\tp[i] = 0;\r\n\t}\r\n\tfor (int i = 0; i < m; i++) {\r\n\t\tint u, v;\r\n\t\tcin >> u >> v;\r\n\t\tadj[u].push_back(v);\r\n\t\tadj[v].push_back(u);\r\n\t}\r\n\tfor (int i = 1; i <= n; i++) {\r\n\t\tif (p[i]==0&&adj[i].size()) {\r\n\t\t\tmultiset<int>mt;\r\n\t\t\tset<int>ms;\r\n\t\t\tdfs(mt,ms,p,arr,adj,i);\r\n\t\t\tauto il = ms.begin();\r\n\t\t\tfor (auto it=mt.begin();it!=mt.end();it++) {\r\n\t\t\t\tarr[*il] = *it;\r\n\t\t\t\til++;\r\n\t\t\t}\r\n\t\t\tmt.clear();\r\n\t\t\tms.clear();\r\n\t\t}\r\n\t}\r\n\tfor (int i = 1; i <= n; i++) {\r\n\t\tcout << arr[i] << \" \";\r\n\t}\r\n}\r\nint main()\r\n{\r\n\tios::sync_with_stdio(0);\r\n\tcin.tie(0);\r\n\tcout.tie(0);\r\n\tint t = 1;\r\n\twhile (t--) solve();\r\n    return 0;\r\n}","lang":4}