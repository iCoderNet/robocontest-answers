{"code":"#include <bits\/stdc++.h>\r\nusing namespace std;\r\n\r\nint f(double x, double y, double r, double a, double b, double c) {\r\n    double dist = abs(a * x + b * y + c) * 1.0 \/ sqrt(a * a + b * b);\r\n    if (r > dist) {\r\n        return -1;\r\n    }\r\n    if (a * x + b * y + c > 0)\r\n        return 1;\r\n    return 0;\r\n}\r\n\r\nint g(double x, double y, double r, double a, double b, double c) {\r\n    if (a * x + b * y + c > 0)\r\n        return 1;\r\n    return 0;\r\n}\r\n\r\nstring solve() {\r\n    int N;\r\n    cin >> N;\r\n    double X[N], Y[N], R[N];\r\n    for (int i = 0; i < N; i++) {\r\n        cin >> X[i] >> Y[i] >> R[i];\r\n    }\r\n    if (N == 1)\r\n        return \"No\";\r\n    if (N == 2)\r\n        return \"Yes\";\r\n    for (int i = 0; i < N-1; i++) {\r\n        for (int j = i+1; j < N; j++) {\r\n            double x1, y1, r1;\r\n            double x2, y2, r2;\r\n            x1 = X[i];\r\n            y1 = Y[i];\r\n            r1 = R[i];\r\n            x2 = X[j];\r\n            y2 = Y[j];\r\n            r2 = R[j];\r\n            double x = (x1 - x2) * (x1 - x2);\r\n            double y = (y1 - y2) * (y1 - y2);\r\n            double d = sqrt(x + y);\r\n            if (r1 > r2)\r\n            {\r\n                swap(x1, x2);\r\n                swap(y1, y2);\r\n                swap(r1, r2);\r\n            }\r\n            if (r1 != r2)\r\n            {\r\n                double n, m, k;\r\n                n = (d * r1) * 1.0 \/ (r1 + r2);\r\n                m = (d * r2) * 1.0 \/ (r1 + r2);\r\n                k = (r1 * d) * 1.0 \/ (r2 - r1);\r\n                double xp1, yp1;\r\n                double xp2, yp2;\r\n                xp1 = (m * x1 + n * x2) * 1.0 \/ d;\r\n                yp1 = (m * y1 + n * y2) * 1.0 \/ d;\r\n                xp2 = ((d + k) * x1 - k * x2) * 1.0 \/ d;\r\n                yp2 = ((d + k) * y1 - k * y2) * 1.0 \/ d;\r\n                double M[4][3];\r\n                double k1, k2;\r\n                k1 = xp1 - x1;\r\n                k2 = yp1 - y1;\r\n                double X1, Y1, X2, Y2;\r\n                X1 = (r1 * r1 * k1 + r1 * k2 * sqrt(k1 * k1 + k2 * k2 - r1 * r1 )) * 1.0 \/ (k1 * k1 + k2 * k2) + x1;\r\n                X2 = (r1 * r1 * k1 - r1 * k2 * sqrt(k1 * k1 + k2 * k2 - r1 * r1 )) * 1.0 \/ (k1 * k1 + k2 * k2) + x1;\r\n                Y1 = (r1 * r1 * k2 - r1 * k1 * sqrt(k1 * k1 + k2 * k2 - r1 * r1 )) * 1.0 \/ (k1 * k1 + k2 * k2) + y1;\r\n                Y2 = (r1 * r1 * k2 + r1 * k1 * sqrt(k1 * k1 + k2 * k2 - r1 * r1 )) * 1.0 \/ (k1 * k1 + k2 * k2) + y1;\r\n\r\n                M[0][0] = yp1 - Y1;\r\n                M[0][1] = X1 - xp1;\r\n                M[0][2] = Y1 * xp1 - X1 * yp1;\r\n\r\n                M[1][0] = yp1 - Y2;\r\n                M[1][1] = X2 - xp1;\r\n                M[1][2] = Y2 * xp1 - X2 * yp1;\r\n\r\n                k1 = xp2 - x1;\r\n                k2 = yp2 - y1;\r\n                double X3, Y3, X4, Y4;\r\n                X3 = (r1 * r1 * k1 + r1 * k2 * sqrt(k1 * k1 + k2 * k2 - r1 * r1 )) * 1.0 \/ (k1 * k1 + k2 * k2) + x1;\r\n                X4 = (r1 * r1 * k1 - r1 * k2 * sqrt(k1 * k1 + k2 * k2 - r1 * r1 )) * 1.0 \/ (k1 * k1 + k2 * k2) + x1;\r\n                Y3 = (r1 * r1 * k2 - r1 * k1 * sqrt(k1 * k1 + k2 * k2 - r1 * r1 )) * 1.0 \/ (k1 * k1 + k2 * k2) + y1;\r\n                Y4 = (r1 * r1 * k2 + r1 * k1 * sqrt(k1 * k1 + k2 * k2 - r1 * r1 )) * 1.0 \/ (k1 * k1 + k2 * k2) + y1;\r\n\r\n                M[2][0] = yp2 - Y3;\r\n                M[2][1] = X3 - xp2;\r\n                M[2][2] = Y3 * xp2 - X3 * yp2;\r\n\r\n                M[3][0] = yp2 - Y4;\r\n                M[3][1] = X4 - xp2;\r\n                M[3][2] = Y4 * xp2 - X4 * yp2;\r\n                for (int z = 0; z < 4; z++) {\r\n                    int c1 = 0, c2 = 0;\r\n                    for (int s = 0; s < N; s++) {\r\n                        if (s == i || s == j) {\r\n                            int temp = g(X[s], Y[s], R[s], M[z][0], M[z][1], M[z][2]);\r\n                            if (temp == 0) {\r\n                                c1++;\r\n                            }\r\n                            else {\r\n                                c2++;\r\n                            }\r\n                            continue;\r\n                        }\r\n                        int temp = f(X[s], Y[s], R[s], M[z][0], M[z][1], M[z][2]);\r\n                        if (temp == 0) {\r\n                            c1++;\r\n                        }\r\n                        if (temp == 1) {\r\n                            c2++;\r\n                        }\r\n                        if (temp == -1) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (c1 != 0 && c2 != 0 && c1 + c2 == N) {\r\n                        return \"Yes\";\r\n                    }\r\n                }\r\n            }\r\n            else\r\n            {\r\n                double xp1, yp1;\r\n                xp1 = (x1 + x2) * 1.0 \/ 2;\r\n                yp1 = (y1 + y2) * 1.0 \/ 2;\r\n                double M[4][3];\r\n                double k1, k2;\r\n                k1 = xp1 - x1;\r\n                k2 = yp1 - y1;\r\n                double X1, Y1, X2, Y2;\r\n                X1 = (r1 * r1 * k1 + r1 * k2 * sqrt(k1 * k1 + k2 * k2 - r1 * r1 )) * 1.0 \/ (k1 * k1 + k2 * k2) + x1;\r\n                X2 = (r1 * r1 * k1 - r1 * k2 * sqrt(k1 * k1 + k2 * k2 - r1 * r1 )) * 1.0 \/ (k1 * k1 + k2 * k2) + x1;\r\n                Y1 = (r1 * r1 * k2 - r1 * k1 * sqrt(k1 * k1 + k2 * k2 - r1 * r1 )) * 1.0 \/ (k1 * k1 + k2 * k2) + y1;\r\n                Y2 = (r1 * r1 * k2 + r1 * k1 * sqrt(k1 * k1 + k2 * k2 - r1 * r1 )) * 1.0 \/ (k1 * k1 + k2 * k2) + y1;\r\n                M[0][0] = yp1 - Y1;\r\n                M[0][1] = X1 - xp1;\r\n                M[0][2] = Y1 * xp1 - X1 * yp1;\r\n\r\n                M[1][0] = yp1 - Y2;\r\n                M[1][1] = X2 - xp1;\r\n                M[1][2] = Y2 * xp1 - X2 * yp1;\r\n\r\n                for (int z = 0; z < 2; z++) {\r\n                    int c1 = 0, c2 = 0;\r\n                    for (int s = 0; s < N; s++) {\r\n                        if (s == i || s == j) {\r\n                            int temp = g(X[s], Y[s], R[s], M[z][0], M[z][1], M[z][2]);\r\n                            if (temp == 0) {\r\n                                c1++;\r\n                            }\r\n                            else {\r\n                                c2++;\r\n                            }\r\n                            continue;\r\n                        }\r\n                        int temp = f(X[s], Y[s], R[s], M[z][0], M[z][1], M[z][2]);\r\n                        if (temp == 0) {\r\n                            c1++;\r\n                        }\r\n                        if (temp == 1) {\r\n                            c2++;\r\n                        }\r\n                        if (temp == -1) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (c1 != 0 && c2 != 0 && c1 + c2 == N) {\r\n                        return \"Yes\";\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return \"No\";\r\n}\r\n\r\nint main()\r\n{\r\n    int t = 1;\r\n    while (t--) cout << solve() << endl;\r\n    return 0;\r\n}","lang":4}