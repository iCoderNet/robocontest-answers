{"code":"#include <bits\/stdc++.h>\r\n#define INF 200002\r\nusing namespace std;\r\n\r\nbool visitt[INF];\r\nvector<int>adj[INF], m1, m2;\r\nint dp[INF];\r\nint maxD = -1 , maxNode = -1 ;\r\n\r\nvoid DFS(int node , int d )\r\n{\r\n    visitt[node] = true;\r\n    m1.push_back(node);\r\n\r\n    if(d > maxD)  {\r\n        maxNode = node;\r\n        maxD = d ;\r\n        m2 = m1;\r\n    }\r\n    for( auto x : adj[node] ) {\r\n        if(visitt[x] == false) {\r\n            DFS(x , d+1);\r\n        }\r\n    }\r\n    m1.pop_back();\r\n}\r\n\r\nvoid BFS(int u, int dis, int l) {\r\n\r\n    visitt[u] = true;\r\n    \r\n    if (adj[u].size() != 1) \r\n        dp[u] = dis + l + 1;\r\n    else \r\n        dp[u] = dis + l - 1;\r\n\r\n    for (auto x : adj[u]) {\r\n        if (visitt[x] == false) {\r\n            BFS(x, dis, l + 1);\r\n        }\r\n    }\r\n}\r\n\r\nvoid null(int n) {\r\n\r\n    for (int i = 0; i < n; i++) {\r\n        visitt[i] = false;\r\n    }\r\n}\r\n\r\nvoid add(int u, int v) {\r\n\r\n    adj[u].push_back(v);\r\n    adj[v].push_back(u);\r\n}\r\n\r\nvoid segintree(int n) {\r\n\r\n\tint u, v;\r\n\tfor (int i = 1; i < n; i++) {\r\n\t\tscanf(\"%d%d\", &u, &v);\r\n\t\tadd(u - 1, v - 1);\r\n    }\r\n\r\n\tDFS(1, 1);\r\n\tnull(n);\r\n\tmaxD = -1;\r\n\tDFS(maxNode, 1);\r\n\tnull(n);\r\n\r\n\tfor (int i = 0; i < m2.size(); i++) {\r\n        visitt[m2[i]] = true;\r\n\t}\r\n\tmaxD--;\r\n\tint l = 0;\r\n\tfor (int i = 0; i < m2.size(); i++) {\r\n        for (auto x : adj[m2[i]]) {\r\n            if (visitt[x] == false) {\r\n                BFS(x, max(l, maxD-l), 1);\r\n            }\r\n        }\r\n        if (adj[m2[i]].size() != 1) \r\n            dp[m2[i]] = max(l, maxD-l) + 1;\r\n        else \r\n            dp[m2[i]] = max(l, maxD-l) - 1;\r\n        l++;\r\n\t}\r\n\r\n}\r\nint32_t main()\r\n{\r\n    int n, q, x;\r\n    scanf(\"%d%d\", &n, &q);\r\n    segintree(n);\r\n    while (q--) {\r\n        scanf(\"%d\", &x);\r\n        printf(\"%d\\n\",dp[x - 1]);\r\n    }\r\n    return 0;\r\n}","lang":4}