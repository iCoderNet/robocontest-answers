{"code":"#include <bits\/stdc++.h>\r\nusing namespace std;\r\nvector<int>h, mx , t, mxt;\r\nvector<vector<int>>g;\r\nvector<pair<int,int>> result;\r\nvoid build(int v, int l, int r)\r\n{\r\n    if (l==r){\r\n        mxt[v]=h[l];\r\n        t[v]=0;\r\n        return;\r\n    }\r\n    int m=(l+r)\/2;\r\n    build(v<<1,l,m);\r\n    build(v<<1|1,m+1,r);\r\n    mxt[v]=max(mxt[v<<1],mxt[v<<1|1]);\r\n    \r\n}\r\nvoid inc(int v, int l, int r , int L, int R , int del){\r\n    if (L<=l  and r<=R){\r\n        t[v]+=del;\r\n        mxt[v]+=del;\r\n        return ;\r\n    }\r\n    if (l>R || r<L) return;\r\n    int m=(l+r)>>1;\r\n    inc(v<<1, l, m, L,R, del);\r\n    inc(v<<1|1, m+1, r, L , R, del);\r\n    mxt[v]=max(mxt[v<<1], mxt[v<<1|1])+t[v];\r\n    \r\n}\r\nint get(int v, int l, int r){\r\n    if (l==r) return l;\r\n    int m=(l+r)>>1;\r\n    if (mxt[v<<1] >= mxt[v<<1|1]) return  get(v<<1,l,m);\r\n    return get(v<<1|1,m+1,r);\r\n}\r\n\r\nint n;\r\nvoid dfs(int u, int H)\r\n{\r\n    h[u]=H;\r\n    mx[u]=u;\r\n    if (result[H].first==-1) result[H]=make_pair(1,u);\r\n    for (int v:g[u]) dfs(v,H+1);\r\n    if(!g[u].empty()) mx[u]=mx[g[u].back()];\r\n    \r\n    \r\n}\r\nvoid dfs(int u)\r\n{\r\n    if(result[mxt[1]].first == -1)\r\n        result[mxt[1]]=make_pair(u,get(1,1,n));\r\n    inc(1,1,n,1,n,1);\r\n    for(int v:g[u]){\r\n        inc(1,1,n,v,mx[v],-2);\r\n        dfs(v);\r\n        inc(1,1,n,v,mx[v],2);\r\n    }\r\n    inc(1,1,n,1,n,-1);\r\n}\r\nint main()\r\n{\r\n    cin>>n;\r\n    g.resize(n+1);\r\n    for(int i=1 , u , v ; i<n;i++)\r\n    {\r\n        cin>>u>>v;\r\n        if (u>v) swap(u,v);\r\n        g[u].push_back(v);\r\n    }\r\n    for(int i = 1; i <= n; i++)\r\n        sort(g[i].begin(), g[i].end());\r\n    mx.resize(n+1);    \r\n    h.resize(n+1);\r\n    result.resize(n+1, make_pair(-1,-1));\r\n    dfs(1,0);\r\n    t.resize(n*4);\r\n    mxt.resize(n*4);\r\n    build(1,1,n);\r\n    \r\n    dfs(1);\r\n    \r\n    int q,x;\r\n    cin>>q;\r\n    for(int i=0 ; i<q; i++)\r\n    {\r\n        cin>>x;\r\n        cout<<result[x].first<<' '<<result[x].second<<'\\n';\r\n    }\r\n    return 0;\r\n}\/\/1111111111114442525626262662627272727272772727262626626267655511111112220092929288","lang":4}