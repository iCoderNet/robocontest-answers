{"code":"#include <bits\/stdc++.h>\r\nusing namespace std;\r\nunsigned move(const unsigned state, const unsigned rod, const unsigned disc){\r\n  return (state & ~(3<<2*(disc-1))) | rod<<2*(disc-1);\r\n}\r\nunsigned get_disc(const unsigned ndisc, const unsigned state, const unsigned rod){\r\n  unsigned disc=ndisc+1;\r\n  for(unsigned h=ndisc;h!=0;--h){\r\n    unsigned r=3&state>>2*(h-1);\r\n    if(r==rod) disc=h;\r\n  }\r\n  return disc;\r\n}\r\n\r\nunsigned long solve(const unsigned ndisc,unsigned start){\r\n  const unsigned win=0;\r\n  if(start==win) return 0;\r\n  std::deque<unsigned> bfs;\r\n  bfs.push_back(start);\r\n  std::vector<unsigned> depth(1<<2*ndisc,0);\r\n  depth[start]=0;\r\n  while(true){\r\n    unsigned par=bfs.front();\r\n    bfs.pop_front();\r\n    unsigned d[4];\r\n    for(unsigned rod=0;rod<4;++rod){\r\n      d[rod]=get_disc(ndisc,par,rod);\r\n    }\r\n    for(unsigned from=0;from<4;++from){\r\n      if(d[from]==ndisc+1) continue;\r\n      for(unsigned to=0;to<4;++to){\r\n  if(d[to]>d[from]){\r\n    unsigned ch=move(par,to,d[from]);\r\n    if(ch==win) return 1+depth[par];\r\n    if(!depth[ch] && ch!=start){\r\n      depth[ch]=1+depth[par];\r\n      bfs.push_back(ch);\r\n    }\r\n  }\r\n      }\r\n    }\r\n  }\r\n  return -1;\r\n}\r\n\r\nint main(){\r\n  unsigned ndisc=0, start=0;\r\n  cin >> ndisc;\r\n  for(unsigned h=1;h<=ndisc;++h){\r\n    unsigned rod=0;\r\n    cin >> rod;\r\n    --rod;\r\n    start=move(start,rod,h);\r\n  }\r\n  cout << solve(ndisc,start);\r\n  return 0;\r\n}","lang":4}