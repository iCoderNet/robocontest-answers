{"code":"#include <iostream>\r\n#include<vector>\r\n#define int long long\r\n#define INF 100001\r\nusing namespace std;\r\nbool vis[INF];\r\nvector<int>adj[INF];\r\nint maxD = -1 , maxNode = -1 ;\r\n\r\nvoid DFS(int node , int d )\r\n{\r\n    vis[node] = true;\r\n    \r\n    if(d > maxD)  {\r\n        maxNode = node ;\r\n        maxD = d ;\r\n    }\r\n    for( auto x : adj[node] ) {\r\n        if(vis[x] == false) {\r\n            DFS(x , d+1);\r\n        }\r\n    }\r\n}\r\n\r\nint solve() {\r\n\tint n, k, u, v;\r\n\tcin >> n >> k;\r\n\tfor (int i = 0; i < n-1; i++) {\r\n\t\tcin >> u >> v;\r\n\t\tadj[u].push_back(v);\r\n\t\tadj[v].push_back(u);\r\n\t}\r\n\tDFS(1, 1);\r\n\tmaxD = -1;\r\n\tfor (int i = 1; i <= n; i++) {\r\n\t\tvis[i] = false;\r\n\t}\r\nDFS(maxNode, 1);\r\n\t\r\n\tif (maxD == k) return k;\r\n\tif (maxD > k) return k + 1;\r\n\tk = k - maxD + 1;\r\n  if ((n-maxD+1)*2>=k) return maxD + k\/2;\r\n\treturn n;\r\n}\r\nint32_t main()\r\n{\r\n    ios::sync_with_stdio(0);\r\n    cin.tie(0);\r\n    cout.tie(0);\r\n    int t = 1;\r\n    while (t--) cout << solve() << endl;\r\n    return 0;\r\n}","lang":4}