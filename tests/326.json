{"code":"#include <bits\/stdc++.h>\r\n#define int long long\r\nusing namespace std;\r\n\r\nint segment_tree[4 * 1000000];\r\n\r\nint build(int* A, int start, int end, int node)\r\n{\r\n\tif (start == end)\r\n\t\tsegment_tree[node] = A[start];\r\n\r\n\telse {\r\n\t\tint mid = (start + end) \/ 2;\r\n\r\n\t\tsegment_tree[node] = max(\r\n\t\t\t\tbuild(A, start, mid, 2 * node + 1),\r\n\t\t\t\tbuild(A, mid + 1, end, 2 * node + 2));\r\n\t}\r\n\treturn segment_tree[node];\r\n}\r\n\r\nint query(int start, int end, int l, int r, int node)\r\n{\r\n\r\n\tif (start > r || end < l)\r\n\t\treturn -1;\r\n\tif (start >= l && end <= r)\r\n\t\treturn segment_tree[node];\r\n\tint mid = (start + end) \/ 2;\r\n\r\n\treturn max(query(start, mid, l, r, 2 * node + 1), query(mid + 1, end, l, r, 2 * node + 2));\r\n}\r\n\r\nint longestSubArray(int* A, int N, int K)\r\n{\r\n\r\n\tint res = 1;\r\n\r\n\tint preSum[N + 1];\r\n\r\n\tpreSum[0] = A[0];\r\n\tfor (int i = 0; i < N; i++)\r\n\t\tpreSum[i + 1] = preSum[i] + A[i];\r\n\r\n\tbuild(A, 0, N - 1, 0);\r\n\r\n\tfor (int i = 0; i < N; i++) {\r\n\r\n\t\tint start = i, end = N - 1,\r\n\t\t\tmid, max_index = i;\r\n\r\n\t\twhile (start <= end) {\r\n\r\n\t\t\tmid = (start + end) \/ 2;\r\n\r\n\t\t\tint max_element\r\n\t\t\t\t= query(0, N - 1,\r\n\t\t\t\t\t\ti, mid, 0);\r\n\r\n\t\t\tint expected_sum = (mid - i + 1)\r\n\t\t\t\t\t\t\t* max_element;\r\n\r\n\t\t\tint actual_sum = preSum[mid + 1]\r\n\t\t\t\t\t\t\t- preSum[i];\r\n\r\n\t\t\tif (expected_sum - actual_sum <= K) {\r\n\r\n\t\t\t\tstart = mid + 1;\r\n\r\n\t\t\t\tmax_index = max(max_index, mid);\r\n\t\t\t}\r\n\r\n\t\t\telse {\r\n\r\n\t\t\t\tend = mid - 1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tres = max(res, max_index - i + 1);\r\n\t}\r\n\r\n\treturn res;\r\n}\r\n\r\nint32_t main()\r\n{\r\n\tint n, k;\r\n\tcin >> n >> k;\r\n\tint arr[n];\r\n\tfor (int i = 0; i < n; i++)\r\n        cin >> arr[i];\r\n    sort(arr, arr + n);\r\n\r\n\tcout << longestSubArray(arr, n, k);\r\n\r\n\treturn 0;\r\n}","lang":4}