{"code":"#include <bits\/stdc++.h>\r\nusing namespace std;\r\n#define ALL(x) (x).begin(), (x).end()\r\n#define SZ(x) ((int)(x).size())\r\n#define BIT(n) ((1LL) << (long long)(n))\r\n#define FOR(i,c) for (auto i=(c).begin(); i != (c).end(); ++i)\r\n#define REP(i,n) for (int i = 0; i < (int)(n); ++i)\r\n#define REP1(i,a,b) for (int i=(int)(a); i <= (int)(b); ++i)\r\n#define MP make_pair\r\n#define PB push_back\r\n#define Fst first\r\n#define Snd second\r\n#ifdef WIN32\r\n#define LLD \"%I64d\"\r\n#else\r\n#define LLD \"%lld\"\r\n#endif\r\ntypedef long long ll;\r\ntypedef unsigned int uint;\r\ntypedef unsigned long long ull;\r\ntypedef long double ld;\r\ntypedef pair<int, int> PII;\r\ntypedef vector<int> VI;\r\n#define runtime() ((double)clock() \/ CLOCKS_PER_SEC)\r\nconst double eps = 1e-7;\r\n#define MAX 100005\r\n#define BASE 27\r\n#define MOD 1000000007\r\nchar sa[MAX];\r\nchar sb[MAX];\r\nll ta[MAX];\r\nll tb[MAX];\r\nll pw[MAX];\r\nint n, m;\r\nll getHash(int l, int r, ll table[])\r\n{\r\n    ll tr = l > 0 ? table[l-1] : 1; \r\n    return (table[r] - pw[r - l + 1] * tr % MOD + MOD) % MOD;\r\n}\r\nbool isSame(int a, int b, int l, int r)\r\n{\r\n    return getHash(a, b, ta) == getHash(l, r, tb);\r\n}\r\n\r\nbool check(int i, int j)\r\n{\r\n    int l = 0, r = min(n - i - 1, m - j - 1);\r\n    int ans = r + 1; \r\n    while (l <= r)\r\n    {\r\n        int mid = (l + r) \/ 2;\r\n\r\n        if (isSame(i, i+mid, j, j+mid))\r\n            l = mid + 1;\r\n        else\r\n            r = mid - 1, ans = mid;\r\n    }\r\n    if (not sa[i + ans]) return false;\r\n    if (not sb[j + ans]) return true;\r\n    return sa[i + ans] <= sb[j + ans];\r\n}\r\nint main()\r\n{\r\n    int T;\r\n    scanf(\"%d\", &T);\r\n    pw[0] = 1;\r\n    for (int i = 1; i < MAX; ++i)\r\n        pw[i] = pw[i-1] * BASE % MOD;\r\n    while (T--)\r\n    {\r\n        scanf(\"%s %s\", sa, sb);\r\n        n = strlen(sa);\r\n        m = strlen(sb);\r\n\r\n        ll hash;\r\n        hash = 1;\r\n        for (int i = 0; sa[i]; ++i)\r\n        {\r\n            hash = (hash * BASE + sa[i] - 'A') % MOD;\r\n            ta[i] = hash;\r\n        }\r\n        hash = 1;\r\n        for (int i = 0; sb[i]; ++i)\r\n        {\r\n            hash = (hash * BASE + sb[i] - 'A') % MOD;\r\n            tb[i] = hash;\r\n        }\r\n        string ans;\r\n        int i = 0, j = 0;\r\n        while (sa[i] and sb[j])\r\n        {\r\n            if (check(i, j)) \/\/ i <= j\r\n                ans.push_back(sa[i++]);\r\n            else\r\n                ans.push_back(sb[j++]);\r\n        }\r\n        while (sa[i])\r\n            ans.push_back(sa[i++]);\r\n        while (sb[j])\r\n            ans.push_back(sb[j++]);\r\n        printf(\"%s\\n\", ans.c_str());\r\n    }\r\n}","lang":4}