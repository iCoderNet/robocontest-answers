{"code":"#include<bits\/stdc++.h>\r\n#define N 101\r\nusing namespace std;\r\n\r\nint dfs(vector<int> tree[N], int visit[N], int *ans, int node)\r\n{\r\n    int num = 0, temp = 0;\r\n\r\n    visit[node] = 1;\r\n\r\n    for (int i = 0; i < tree[node].size(); i++)\r\n    {\r\n        if (visit[tree[node][i]] == 0)\r\n        {\r\n\r\n            temp = dfs(tree, visit, ans, tree[node][i]);\r\n\r\n            (temp%2)?(num += temp):((*ans)++);\r\n        }\r\n    }\r\n\r\n    return num+1;\r\n}\r\n\r\nint minEdge(vector<int> tree[N], int n)\r\n{\r\n    int visit[n+2];\r\n    int ans = 0;\r\n    int count = 0;\r\n    memset(visit, 0, sizeof visit);\r\n    \r\n    for (int i = 1; i <= n; i++) {\r\n      if (visit[i] == 0) {\r\n      dfs(tree, visit, &ans, i);\r\n      count += ans;\r\n      ans = 0;\r\n      }\r\n    }\r\n\r\n    return count;\r\n}\r\n\r\nint main()\r\n{\r\n    int n, m;\r\n    cin >> n >> m;\r\n    int arrr[1000000];\r\n\r\n    vector<int> tree[n+2];\r\n    for (int i = 0; i < m; i++)\r\n    {\r\n        int u, v;\r\n        cin >> u >> v;\r\n        tree[u].push_back(v);\r\n        tree[v].push_back(u);\r\n    }\r\n\r\n    cout << minEdge(tree, n) << endl;\r\n    return 0;\r\n}","lang":4}